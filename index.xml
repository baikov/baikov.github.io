<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>baikov.dev</title><link>https://baikov.dev/</link><description>baikov.dev</description><generator>Hugo -- gohugo.io</generator><language>ru</language><managingEditor>alex@baikov.dev (Baikov)</managingEditor><webMaster>alex@baikov.dev (Baikov)</webMaster><lastBuildDate>Wed, 08 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://baikov.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Встроенные типы данных в Python 3</title><link>https://baikov.dev/python-built-in-data-types/</link><pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/python-built-in-data-types/</guid><description>Говоря о типах данных, стоит упомянуть, что Python - язык с неявной сильной динамической типизацией (подробнее о видах типизации в языках программирования).
Встроенные и не встроенные типы В Python типы данных можно разделить на встроенные в интерпретатор (built-in) и не встроенные, которые можно использовать при импортировании соответствующих модулей. Int - больше, чем просто int Стандартная реализация Python написана на C (CPython). Это означает, что каждый объект Python — это просто искусно замаскированная структура C, которая содержит не только его значение, но и другую информацию.</description></item><item><title>Алгоритмы</title><link>https://baikov.dev/algorithms/</link><pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/algorithms/</guid><description>Список вопросов к Python собеседованию
Время выполения алгоритма («О-большое») О(1) - константное время (получение одного элемента в массиве) O(log n) - логарифмическое время (бинарный поиск). О(n) - линейное время (простой поиск). О(n*log n) - линейно-логарифмическое время (эффективные алгоритмы сортировки, напр. быстрая сортировка). О(n2) - квадратичное время (медленные алгоритмы сортировки: сортировка выбо­ром). О(n3) - кубическое время (Обычное умножение двух n на n матриц). О(n!) - очень медленные алгоритмы (задача о коммивояжере полным перебором).</description></item><item><title>Интроспекция в Python</title><link>https://baikov.dev/introspection-in-python/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/introspection-in-python/</guid><description>Список вопросов к Python собеседованию
Определение понятия интроспекции Интроспекция (introspection) в контексте объектно-ориентированных языков программирования — это возможность запросить тип и структуру объекта во время выполнения программы.
Среди языков, поддерживающих интроспекцию — C++ (с RTTI), Go, Java, Kotlin, JavaScript, Perl, Ruby, Smalltalk, PHP и Python.
В PHP и Python интроспекция интегрирована в сам язык.
В Python интроспекция может быть функционально реализована с помощью:
встроенных методов dir(), type(), isinstance(), hasattr(), id(); встроенного модуля inspect; идти непосредственно от имени объекта с помощью встроенных аттрибутов __class__ и __dict__.</description></item><item><title>Область видимости переменных в Python</title><link>https://baikov.dev/python-scope-of-variables/</link><pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/python-scope-of-variables/</guid><description>Список вопросов к Python собеседованию
Область видимости (scope) определяет контекст переменной, в рамках которого ее можно использовать. В Python существует три области видимости:
локальная глобальная нелокальная Основные моменты:
Изнутри функции видны переменные, которые были определены и внутри нее и снаружи. Переменные, определенные внутри функции – локальные, снаружи – глобальные. Снаружи функций не видны никакие переменные, определенные внутри них. Изнутри функции можно изменять значение переменных, которые определены в глобальной области видимости с помощью спецификатора global.</description></item><item><title>Настройка Ubuntu 20.04 для развертывания проекта в Docker</title><link>https://baikov.dev/ubuntu-setup-for-python-stack/</link><pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/ubuntu-setup-for-python-stack/</guid><description><![CDATA[У нас имеется VPS с Ubuntu 20.04, нужно настроить его для развертывания проекта.
Первые шаги 1 2 3 4 5 6 7 8 9  # Обновим apt update &amp;&amp; sudo apt upgrade -y # Создаем нового юзера adduser www &amp;&amp; usermod -aG sudo www # password for sudo - off sudo visudo # %sudo ALL=(ALL:ALL) NOPASSWD:ALL   Выходим с сервера и копируем ssh-key
1  ssh-copy-id www@ip   Заходим под пользователем www и продолжаем настройку.]]></description></item><item><title>PostgresSQL CLI command cheatsheet</title><link>https://baikov.dev/postgres-cli-commands/</link><pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/postgres-cli-commands/</guid><description>Connect to PostgreSQL database
1 2 3 4 5 6 7 8 # connects to a database under a specific user psql -d database -U user -W # connect to a database that resides on another host psql -h host -d database -U user -W # use SSL mode for the connection psql -U user -h host &amp;#34;dbname=db sslmode=require&amp;#34; \du – список пользователей
\dp (или \z) – список таблиц, представлений, последовательностей, прав доступа к ним</description></item><item><title>GitHub badges</title><link>https://baikov.dev/github-badges/</link><pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/github-badges/</guid><description><![CDATA[Подробнее на странице автора1
GitHub stats 1  &lt;img src=&#34;https://github-readme-stats.vercel.app/api?username=baikov&amp;count_private=true&amp;hide_title=true&amp;hide=issues,contribs&amp;show_icons=true&amp;theme=calm&amp;text_color=#fff&amp;icon_color=#e31e25&amp;border_color=#e31e25&#34;&gt;   Repo info  1 2 3  &lt;a href=&#34;https://github.com/baikov/allflags&#34;&gt; &lt;img src=&#34;https://github-readme-stats.vercel.app/api/pin/?username=baikov&amp;repo=traefik-prometheus&amp;theme=calm&amp;border_color=#e31e25&#34; /&gt; &lt;/a&gt;    1 2 3  &lt;a href=&#34;https://github.com/baikov/allflags&#34;&gt; &lt;img src=&#34;https://github-readme-stats.vercel.app/api/pin/?username=baikov&amp;repo=allflags&amp;border_color=#e31e25&amp;text_color=#ffffff&amp;title_color=#ffffff&#34; /&gt; &lt;/a&gt;   Github top langs 1  &lt;img id=&#34;elem&#34; src=&#34;https://github-readme-stats.vercel.app/api/top-langs/?username=baikov&#34; /&gt;   GitHub activity 1  &lt;img id=&#34;elem&#34; src=&#34;https://ghchart.rshah.org/e31e25/baikov&#34; /&gt;     GitHub Readme Stats&#160;&#x21a9;&#xfe0e;
   ]]></description></item><item><title>Django Cookiecutter commands</title><link>https://baikov.dev/cookiecutter-commands/</link><pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/cookiecutter-commands/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 pip install &amp;#34;cookiecutter&amp;gt;=1.7.0&amp;#34; sudo docker-compose -f production.yml build sudo docker-compose -f production.yml down sudo docker-compose -f production.yml up -d sudo docker-compose -f production.yml run --rm django python manage.py migrate sudo docker-compose -f production.yml logs sudo docker-compose -f production.</description></item><item><title>Git commands</title><link>https://baikov.dev/git-commands/</link><pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/git-commands/</guid><description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  git init git add . git commit -m &#39;Description&#39; git commit -a -m &#39;Description&#39; # коммитит все файлы, не требует выполнять add git rm &lt;file&gt; # -f если файл уже в коммите git rm --cached &lt;file&gt; # Удалить файл из индекса, оставив его при этом в рабочем каталоге git mv &lt;file_from&gt; &lt;file_to&gt; git status (-s --short) git reset HEAD &lt;file&gt; git clone [url] git filter-branch --force --index-filter \  &#34;git rm --cached --ignore-unmatch PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA&#34; \  --prune-empty --tag-name-filter cat -- --all git push origin --force --all git push origin --force --tags # Branches git branch # Список веток git branch &lt;branch_name&gt; git checkout &lt;branch_name&gt; git checkout -b &lt;branch_name&gt; # Предыдущие 2 команды в одну строку # Слияние с master git checkout master git merge &lt;branch_name&gt; git branch -d &lt;branch_name&gt; # Удаление ветки git remote -v # внешний репозиторий git remote add origin https://github.]]></description></item></channel></rss>