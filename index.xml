<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>baikov.dev</title><link>https://baikov.dev/</link><description>baikov.dev</description><generator>Hugo -- gohugo.io</generator><language>ru</language><managingEditor>alex@baikov.dev (Baikov)</managingEditor><webMaster>alex@baikov.dev (Baikov)</webMaster><lastBuildDate>Wed, 08 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://baikov.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>15 принципов разработки ПО - аббревиатуры и расшифровка</title><link>https://baikov.dev/coding-principles/</link><pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/coding-principles/</guid><description>YAGNI «You Ain’t Gonna Need It» — «Вам это не понадобится»
Процесс и принцип проектирования ПО, при котором в качестве основной цели и/или ценности декларируется отказ от избыточной функциональности, — то есть отказ добавления функциональности, в которой нет непосредственной надобности.
DRY Don’t repeat yourself - не повторяйте себя
Это принцип разработки программного обеспечения, нацеленный на снижение повторения информации различного рода, особенно в системах со множеством слоёв абстрагирования. Принцип DRY формулируется как: «Каждая часть знания должна иметь единственное, непротиворечивое и авторитетное представление в рамках системы».</description></item><item><title>Встроенные типы данных в Python 3</title><link>https://baikov.dev/python-built-in-data-types/</link><pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/python-built-in-data-types/</guid><description>Говоря о типах данных, стоит упомянуть, что Python - язык с неявной сильной динамической типизацией (подробнее о видах типизации в языках программирования).
Встроенные и не встроенные типы В Python типы данных можно разделить на встроенные в интерпретатор (built-in) и не встроенные, которые можно использовать при импортировании соответствующих модулей. Int - больше, чем просто int Стандартная реализация Python написана на C (CPython). Это означает, что каждый объект Python — это просто искусно замаскированная структура C, которая содержит не только его значение, но и другую информацию.</description></item><item><title>Вопросы с ответами к собеседованию по Python</title><link>https://baikov.dev/python-interview-questions/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/python-interview-questions/</guid><description>Общие вопросы Принципы программирования? Отличия процедурной и объектно-ориентированной парадигмы программирования? Основные принципы ООП? Что такое множественное наследование? Что такое @property? Что такое инженерия и процесс разработки в целом? Основные методологии разработки (жизненный цикл продукта)? Методология Agile. Различия Kanban и Scrum подходов. Методы HTTP-запросов и какая между ними разница? Как выглядят HTTP-request/response? Что такое авторизация и как она работает? Что такое cookies? Что такое веб уязвимость? Какие знаете классические базы данных?</description></item><item><title>Парадигмы программирования - список и краткие описания</title><link>https://baikov.dev/programming-paradigms/</link><pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/programming-paradigms/</guid><description>Список вопросов к Python собеседованию
Источники:
Подробная статья</description></item><item><title>Интроспекция в Python</title><link>https://baikov.dev/introspection-in-python/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/introspection-in-python/</guid><description>Список вопросов к Python собеседованию
Определение понятия интроспекции Интроспекция (introspection) в контексте объектно-ориентированных языков программирования — это возможность запросить тип и структуру объекта во время выполнения программы.
Среди языков, поддерживающих интроспекцию — C++ (с RTTI), Go, Java, Kotlin, JavaScript, Perl, Ruby, Smalltalk, PHP и Python.
В PHP и Python интроспекция интегрирована в сам язык.
В Python интроспекция может быть функционально реализована с помощью:
встроенных методов dir(), type(), isinstance(), hasattr(), id(); встроенного модуля inspect; идти непосредственно от имени объекта с помощью встроенных аттрибутов __class__ и __dict__.</description></item><item><title>Область видимости переменных в Python</title><link>https://baikov.dev/python-scope-of-variables/</link><pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/python-scope-of-variables/</guid><description>Список вопросов к Python собеседованию
Область видимости (scope) определяет контекст переменной, в рамках которого ее можно использовать. В Python существует три области видимости:
локальная глобальная нелокальная Основные моменты:
Изнутри функции видны переменные, которые были определены и внутри нее и снаружи. Переменные, определенные внутри функции – локальные, снаружи – глобальные. Снаружи функций не видны никакие переменные, определенные внутри них. Изнутри функции можно изменять значение переменных, которые определены в глобальной области видимости с помощью спецификатора global.</description></item><item><title>Настройка Ubuntu 20.04 для развертывания проекта в Docker</title><link>https://baikov.dev/ubuntu-setup-for-python-stack/</link><pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/ubuntu-setup-for-python-stack/</guid><description><![CDATA[У нас имеется VPS с Ubuntu 20.04, нужно настроить его для развертывания проекта.
Первые шаги 1 2 3 4 5 6 7 8 9  # Обновим apt update &amp;&amp; sudo apt upgrade -y # Создаем нового юзера adduser www &amp;&amp; usermod -aG sudo www # password for sudo - off sudo visudo # %sudo ALL=(ALL:ALL) NOPASSWD:ALL   Выходим с сервера и копируем ssh-key
1  ssh-copy-id www@ip   Заходим под пользователем www и продолжаем настройку.]]></description></item><item><title>Декораторы в Python: определение, особенности, примеры декораторов</title><link>https://baikov.dev/decorators-in-python/</link><pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/decorators-in-python/</guid><description>Список вопросов к Python собеседованию
Схема для понимания итераторов и генераторов" Схема для понимания итераторов и генераторов -- -- Паттерн проектирования &amp;ldquo;Декоратор&amp;rdquo; Декоратор (Decorator) — структурный шаблон проектирования, предназначенный для динамического подключения дополнительного поведения к объекту. Шаблон Декоратор предоставляет гибкую альтернативу практике создания подклассов с целью расширения функциональности.1
Декораторы в Python Декоратор — это функция, которая позволяет обернуть другую функцию для расширения её функциональности без непосредственного изменения её кода.</description></item><item><title>Сопрограммы (corutines) в Python</title><link>https://baikov.dev/coroutines-in-python/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/coroutines-in-python/</guid><description>Список вопросов к Python собеседованию
Сопрограммы – это особый тип функций, которые сознательно передают управление вызывающему объекту, но они не заканчивают свой контекст в процессе, поддерживая его в состоянии ожидания.
Сопрограмма сама решает, когда перенаправить flow в другое место (например, в другую сопрограмму). И это позволяет строить красивые разветвленные деревья обработки потоков данных, реализовывать MapReduce, возможно прокидывать текущие байты через сокет на другую ноду. Более того, сопрограммы могут быть фактически реализованы абсолютно на любом языке.</description></item><item><title>Итераторы, генераторы и итерируемые объекты в Python</title><link>https://baikov.dev/iterators-and-generators-python/</link><pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate><author><name>Baikov</name></author><guid>https://baikov.dev/iterators-and-generators-python/</guid><description>Список вопросов к Python собеседованию
Схема для понимания итераторов и генераторов" Схема для понимания итераторов и генераторов Итератор Итератор — это:
интерфейс, предоставляющий доступ к элементам коллекции (массива или контейнера). Коллекции не должны обязательно существовать в памяти и быть конечными. объект, в котором есть два метода: __iter__ (возвращает сам объект итератора) и __next__ (возвращает следующее значение из итератора) Особенности итератора:
при запросе каждого следующего значения, итератор знает, как его вычислить хранит информацию о текущем состоянии итерируемого объекта, над которым он работает почти всегда возвращает себя из метода __iter__, так как выступает итераторами для самого себя (есть исключения) итератор не должен иметь и часто не имеет определённой длины.</description></item></channel></rss>