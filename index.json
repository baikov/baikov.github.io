[{"categories":null,"content":"Образование: ННГУ Лобачевского (ВМК). Стек: Python 3.6+, Django 2.2+, DRF, PostgreSQL, Redis, Celery, Docker, git, pytest, HTML, CSS, JS. Более 10 лет опыта в разработке и продвижении сайтов.","date":"08.12.2021","objectID":"/cv/","series":null,"tags":null,"title":"Резюме: Junior python backend developer | Байков Алексей","uri":"/cv/"},{"categories":null,"content":"Резюме на вакансию в компанию -- -- Скачать (.pdf) Байков Алексей 02.01.1987 (35 лет) Python backend разработчик Уровень: Junior, Junior+ Уровень: Middle-- Занятость: полная Формат работы: удаленная, в офисе Зарплатные ожидания: 100.000 руб Контакты +7 (929) 053-73-35 https://t.me/alexbaikov alex@baikov.dev Нижний Новгород, Россия -- Python Django DRF JSON APIs PostgreSQL Celery Flower Nginx Traefik Redis Prometheus Grafana Docker Docker Compose Git GitHub GitHub Actions Unit testing HTML CSS Все навыки... -- Цели Начать карьеру backend-разработчика в современной продуктовой компании. Профессиональный рост до уровня Middle в течение года и, как следствие, повышение своей рентабельности. Стек: Python 3.6+, Django 2.2+, PostgreSQL, DRF, FastAPI, Docker. Опыт работы февраль 2021 — по настоящее время (1 год) Изучение нового стека Все изучаемые технологии применял на практике (проект allflags.ru) Краткий список практических навыков: Администрирование VPS, работа с Heroku, AWS, Yandex.Cloud; Настройка Nginx, Traefik, Prometheus, Grafana; Работа с Docker и Docker Compose, основы CI/CD; Codestyle (flake8, black), тестирование (pytest, coverage), документирование (Sphinx); Контроль версий и процесс ветвления (git, github, git-flow, github-flow); Работа с Django, DRF, PostgreSQL, Redis, Celery, Flower. Python Django Git Docker Celery PostgreSQL DRF Redis CI/CD Traefik Linux Prometheus Grafana -- октябрь 2015 — по настоящее время (6 лет 4 мес) ПКФ Луидор, Нижний Новгород (автомобильный завод, спецавтомобили) Web-разработчик, SEO-специалист Разработал сервис поиска запчастей по VIN (backend: Django и DRF, frontend: Vue.js); Разработка, доработка и продвижение сайтов компании на 1C-Bitrix; Более 3 лет опыта удаленной работы. HTML CSS Vue.js SCSS 1С-Bitrix PHP SEO JavaScript Gulp -- апрель 2012 — октябрь 2015 (3 года 7 мес) Фриланс, собственные проекты Full-stack разработчик, SEO специалист создание и продвижение сайтов (1C-Bitrix, WordPress, OpenCart). сентябрь 2011 — апрель 2012 (1 год 1 мес) Редокс, Москва (оптовая торговля, товары для здоровья) Заместитель руководителя филиала сентябрь 2008 — апрель 2011 (2 года 7 мес) Редокс, Нижний Новгород (розничная торговля, товары для здоровья) Менеджер по продажам ноябрь 2006 — май 2008 (1 год 7 мес) Тэлма Софт, Нижний Новгород (разработка ПО) Инженер-стажер в отделе разработки и тестирования ПО Стажировка во время обучения в университете. Обо мне Я люблю веб-разработку и занимаюсь ей более 10 лет. За это время приобрел как менеджерский опыт, так и опыт во frontend, backend и DevOps. Новые технологии стимулируют мое желание постоянно учиться и расти в профессиональном плане. Стараюсь писать чистый код и следовать стандартам технологий, которые использую. Навыки Python Django DRF JSON APIs PostgreSQL Celery Flower Nginx Traefik Redis Prometheus Grafana Docker Docker Compose Git GitHub GitHub Actions Unit testing HTML CSS -- Образование ННГУ им. Лобачевского Нижегородский государственный университет им. Н.И. Лобачевского 2004-2009 (5 лет), дневное отделение, очно Факультет вычислительной математики и кибернетики Специальность: Прикладная математика и информатика Специализация: Системы поддержки принятия решений -- Квалификация: математик, системный программист Навыки Python Django DRF JSON APIs PostgreSQL Celery Flower Nginx Traefik Redis Prometheus Grafana Docker Docker Compose Git GitHub GitHub Actions Unit testing HTML CSS Языки Русский родной Английский Intermediate Курсы Docker 2021, slurm.io-- Docker | 2021, slurm.io Build a Backend REST API with Python \u0026 Django 2021, Udemi-- Build a Backend REST API with Python \u0026 Django | 2021, Udemi Алгоритмыи структуры данных на Python 3 (МФТИ) 2021, Youtube-- Алгоритмыи структуры данных на Python 3 (МФТИ) | 2021, Youtube Проекты Флаги стран мира allflags.ru baikov/allflags Сервис поиска запчастей parts.baikov.dev baikov/autoparts Книги Чистый Python, Бейдер Д. Грокаем алгоритмы, Бхаргава А. Секреты Python Pro, Хиллард Д. Django 3.0. Практика создания веб-","date":"08.12.2021","objectID":"/cv/:0:0","series":null,"tags":null,"title":"Резюме: Junior python backend developer | Байков Алексей","uri":"/cv/#"},{"categories":["python-interview"],"content":"К основным встроенным (built-in) типам относятся: NoneType (None), Numeric Type (int, float, complex), Boolean (True и False), Sequence Type (str, list, tuple, range), а так же set, frozenset и dict.","date":"11.12.2021","objectID":"/python-built-in-data-types/","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/"},{"categories":["python-interview"],"content":"Говоря о типах данных, стоит упомянуть, что Python - язык с неявной сильной динамической типизацией (подробнее о видах типизации в языках программирования). Встроенные и не встроенные типы В Python типы данных можно разделить на встроенные в интерпретатор (built-in) и не встроенные, которые можно использовать при импортировании соответствующих модулей. Int - больше, чем просто int Стандартная реализация Python написана на C (CPython). Это означает, что каждый объект Python — это просто искусно замаскированная структура C, которая содержит не только его значение, но и другую информацию. Каждое значение в Python имеет тип данных. Поскольку в Python все является объектом, типы данных на самом деле являются классами, а переменные являются экземплярами (объектами) этих классов. На аппаратном уровне переменная — это ссылка на место в памяти. ","date":"11.12.2021","objectID":"/python-built-in-data-types/:0:0","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#"},{"categories":["python-interview"],"content":"Числовые типы (Numeric Types) Существует три базовых числовых типа: int, float, complex. ","date":"11.12.2021","objectID":"/python-built-in-data-types/:1:0","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#числовые-типы-numeric-types"},{"categories":["python-interview"],"content":"Integer int - целые числа. Отрицательные и положительные числа любой длины (ограничением является только количество памяти). # integer a = 1000 type(a) # \u003cclass 'int'\u003e ","date":"11.12.2021","objectID":"/python-built-in-data-types/:1:1","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#integer"},{"categories":["python-interview"],"content":"Float float - числа с плавающей точкой, отрицательные или положительные, содержащие десятичную точку или символ экспоненты “e” (показатель возведения в степень 10: 35e3, 12E4). Точность до 15 знаков после запятой. float может принимать значения nan и inf/-inf. # float b = 12.5634423 # 35e3, 12E4, -87.7e100 type(b) # \u003cclass 'float'\u003e # Not A Number x = float(\"nan\") print(x) # nan type(x) # \u003cclass 'float'\u003e # Аналогично с бесконечностью y = float(\"inf\") # inf z = float(\"-inf\") # -inf ","date":"11.12.2021","objectID":"/python-built-in-data-types/:1:2","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#float"},{"categories":["python-interview"],"content":"Complex complex - комплексные числа (x+yj, где x - действительная часть, y - мнимая часть, а j - мнимая единица). # complex c = 3+5j # 5j, -5j type(c) # \u003cclass 'complex'\u003e print(c.real) # 3.0 print(c.imag) # 5.0 ","date":"11.12.2021","objectID":"/python-built-in-data-types/:1:3","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#complex"},{"categories":["python-interview"],"content":"Long long - использовался для представления больших целых чисел. Кроме того, boolean является подтипом int. ","date":"11.12.2021","objectID":"/python-built-in-data-types/:1:4","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#long"},{"categories":["python-interview"],"content":"Логический тип (Boolean Type) В булевом типе данных есть только два типа значений: True и False (встроенные константы чувствительные к регистру). type(True) # \u003cclass 'bool'\u003e type(False) # \u003cclass 'bool'\u003e Функция приведения типа bool() позволяет оценить любое значение и вернуть True или False. В Python истинными и ложными значениями считаются не только True и False: Истинное значение: любое ненулевое число любая непустая строка любой непустой объект Ложное значение: 0 None пустая строка пустой объект ","date":"11.12.2021","objectID":"/python-built-in-data-types/:2:0","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#логический-тип-boolean-type"},{"categories":["python-interview"],"content":"Последовательности (Sequence Type) К ним относятся основные: str (строка), list (список), tuple (кортеж), range (диапазон) и бинарные: bytes (байтовая строка), bytearray (байтовый массив), memoryview (специальные объекты для доступа к внутренним данным объекта через protocol buffer). Как и все типы данных, последовательности делятся на изменяемые (mutable) и неизменяемые (immutable). Операции, поддерживаемые большинством последовательностей (изменяемых и неизменяемых): x in s # (x not in s) - проверка принадлежности s + t # конкатенация s * n # s[i] # получение по индексу s[i:j:k] # срезы (старт:стоп:шаг) len(s) # длина s min(s) # минимальный элемент s max(s) # максимальный элемент s s.index(x[, i[, j]]) # индекс первого появления x (at or after index i and before index j) s.count(x) # общее кол-во вхождений x в s hash() - единственная операция, реализованная в неизменяемых типах последовательностей и отсутствующая в изменяемых. Это позволяет использовать неизменяемые последовательности, такие как экземпляры кортежей, в качестве ключей словаря и хранить их в set и frozenset. Операции над изменяемыми последовательностями: s[i] = x s[i:j] = t del s[i:j] s[i:j:k] = t del s[i:j:k] s.append(x) s.clear() s.copy() s.extend(t) # or s += t s *= n s.insert(i, x) s.pop() # or s.pop(i) s.remove(x) s.reverse() ","date":"11.12.2021","objectID":"/python-built-in-data-types/:3:0","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#последовательности-sequence-type"},{"categories":["python-interview"],"content":"Строка (string) Cтрока - это неизменяемая упорядоченная последовательность символов Юникода. В питоне нет символьного типа данных char, символ представляет собой строку одинарной длины. Строку можно создать различными способами: # Одинарные кавычки first_way = 'This is a string' # Двойные кавычки second_way = \"This is a string\" # Тройные кавычки (одинарные или двойные) third_way_single = '''This is a string''' third_way_double = \"\"\"This is a string\"\"\" Для строк доступны общие операции c последовательностями, а так же дополнительные методы встроенного класса str(). ","date":"11.12.2021","objectID":"/python-built-in-data-types/:3:1","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#строка-string"},{"categories":["python-interview"],"content":"Список (list) Список — это изменяемая упорядоченная последовательность, обычно используемая для хранения коллекций однородных элементов. Поскольку списки индексируются, то могут содержать элементы с одинаковым значением. list1 = [10, 20, 30, 77] list2 = ['one', 'dog', 'seven'] list3 = [1, 20, 4.0, 'word'] ","date":"11.12.2021","objectID":"/python-built-in-data-types/:3:2","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#список-list"},{"categories":["python-interview"],"content":"Кортеж (tuple) Кортеж — это неизменяемая упорядоченная последовательность, обычно используемая для хранения коллекций разнородных элементов. Также используются в случаях, когда требуется неизменяемая последовательность однородных данных (например, использование в экземпляре set или dict). Кортежи, как правило, быстрее, чем списки в Python. tuple1 = (1, 2, 5, 6) tuple2 = tuple('a', 'b', 'c') tuple3 = () # пустой кортеж tuple4 = 23, 13, 100 tuple5 = (\"London\", \"Tokyo\", \"Korea\", 1986, 1640, 1948) ","date":"11.12.2021","objectID":"/python-built-in-data-types/:3:3","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#кортеж-tuple"},{"categories":["python-interview"],"content":"Диапазон (range) Тип range представляет собой упорядоченную неизменяемую последовательность чисел и обычно используется для выполнения определенного количества раз циклов for. Для диапазонов доступны общие операции с последовательностями, кроме конкатенации и повторения. Проверка диапазонов range на равенство с == и != сравнивает их как последовательности. Атрибуты start, stop и step. ","date":"11.12.2021","objectID":"/python-built-in-data-types/:3:4","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#диапазон-range"},{"categories":["python-interview"],"content":"Байтовые строки (bytes) Тип данных bytes - это упорядоченная неизменяемая последовательность отдельных байтов. Синтаксис для байтовых строк в основном такой же, как и для обычных строк, за исключением того, что добавляется префикс b. ","date":"11.12.2021","objectID":"/python-built-in-data-types/:3:5","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#байтовые-строки-bytes"},{"categories":["python-interview"],"content":"Байтовый массив (bytearray) Bytearray объекты являются упорядоченным неизменяемым аналогом bytes. ","date":"11.12.2021","objectID":"/python-built-in-data-types/:3:6","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#байтовый-массив-bytearray"},{"categories":["python-interview"],"content":"Буфер обмена (memoryview) Объекты memoryview позволяют коду Python получать доступ к внутренним данным объекта, который поддерживает буферный протокол, без копирования. ","date":"11.12.2021","objectID":"/python-built-in-data-types/:3:7","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#буфер-обмена-memoryview"},{"categories":["python-interview"],"content":"Множества (Set Types) Множество - это неупорядоченный набор различных хешируемых объектов. Обычно множества используются для проверки вхождения элемента, удаления дубликатов из последовательности и вычисления математических операций, таких как пересечение, объединение, разность и т. д. Будучи неупорядоченной коллекцией, множества не сохраняют положение элемента или порядок вставки. Соответственно, не поддерживают индексы, срезы или другое поведение, подобное упорядоченной последовательности. Существует два встроенных типа множеств: set и frozenset. ","date":"11.12.2021","objectID":"/python-built-in-data-types/:4:0","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#множества-set-types"},{"categories":["python-interview"],"content":"Множество (set) Тип set является изменяемым множеством, содержимое может быть изменено с помощью таких методов, как add() и remove(), так же поддерживает операции доступные frozenset. Поскольку тип set является изменяемым, он не имеет хеш-значения и не может использоваться ни как ключ словаря, ни как элемент другого множества. # Use the type constructor set2 = set('a', 'b', 'c') # Use a comma-separated list of elements within braces set1 = {1, 2, 5, 6} # Use a set comprehension {c for c in 'abracadabra' if c not in 'abc'} ","date":"11.12.2021","objectID":"/python-built-in-data-types/:4:1","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#множество-set"},{"categories":["python-interview"],"content":"Неизменяемое множество (frozenset) Тип frozenset является неизменяемым и хешируемым множеством, его содержимое не может быть изменено после его создания, поэтому он может использоваться как ключ словаря или как элемент другого множества. # Use the type constructor s = frozenset({'a', 'b', 'c'}) ","date":"11.12.2021","objectID":"/python-built-in-data-types/:4:2","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#неизменяемое-множество-frozenset"},{"categories":["python-interview"],"content":"Словарь (dict) Словарь — это упорядоченная, изменяемая коллекция пар ключ: значение, в которой не допускается дублирование ключей. Ключи словаря - это произвольные, неизменяемые (хешируемые) значения. Значения элементов словаря могут иметь любой тип данных. Словари стали упорядоченными. Словари и объекты представления словаря (dict.keys(), dict.values(), dict.items()) теперь обратимы. Словарь может быть создан несколькими способами: # Используя разделенный запятыми список пар ключ: значение в фигурных скобках dict1 = {'Moscow': 1023, 'SPB': 2048} # Используя dict comprehension dict2 = {x: x ** 2 for x in range(10)} # Используя конструктор типа dict3 = dict([('foo', 100), ('bar', 200)]) dict4 = dict(foo=100, bar=200) В других языках программирования тип данных подобный словарю может называться ассоциативный массив, хеш или хеш-таблица. ","date":"11.12.2021","objectID":"/python-built-in-data-types/:5:0","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#словарь-dict"},{"categories":["python-interview"],"content":"Итераторы и генераторы ``` Объект с id = 1672501744 будет иметь значение 15 и изменить его уже нельзя. Если тип данных изменяемый, то можно менять значение объекта. Например, создадим список [1, 2], а потом заменим второй элемент на 3. ```python a = [1, 2] id(a) # 47997336 a[1] = 3 print(a) # [1, 3] id(a) # 47997336 ``` ## Упорядоченные и неупорядоченные типы -- Источники: Python documentation - Built-in Types Understand How Much Memory Your Python Objects Use Understanding Data Types in Python ","date":"11.12.2021","objectID":"/python-built-in-data-types/:6:0","series":null,"tags":["python","data-types"],"title":"Встроенные типы данных в Python 3","uri":"/python-built-in-data-types/#итераторы-и-генераторы"},{"categories":null,"content":"Описание","date":"08.12.2021","objectID":"/skills/","series":null,"tags":null,"title":"Навыки","uri":"/skills/"},{"categories":null,"content":"Актуальные навыки Языки: Python, JavaScript Backend: Django, Flask, Celery, Flower API: Django REST Framework, JSON APIs Тестирование: Unit тестирование Frontend: HTML (flex, grid), CSS3 (BEM), SASS (SCSS), Bootstrap (2, 3, 4), Vue.js, Webpack, Gulp, npm, DevTools, SSG (Hugo) БД: PostgreSQL, Redis, SQLite Cloud platform: Reg.ru, AWS, Yandex.Cloud Web servers: Nginx, Traefik Web security: HTTPS, SSL/TLS, CORS Мониторинг: Prometheus, Grafana Другое: Docker, Docker Compose, Git, GitHub, git-flow, github-flow, Follow the \"Twelve factor app\", Sphinx CI/CD: GitHub Actions Tools: VSCode, iTerm2 + zsh + oh-my-zsh, Vim, Homebrew OS: MacOS, Linux (Debian, Ubuntu) Навыки в смежных сферах SEO: Link building, аудит, техническая оптимизация Web analytics: GTM, Google Analytics, Yandex Metrica, PowerBI Web security: pentesting, XSS, CSRF, SQL-Injection OS: Kali Linux Планирую изучить Языки: Go Backend: aiohttp, sqlalchemy, RabbitMQ, RPC, asyncio API: FastAPI, GraphQL, gRPC Тестирование: Integration Тестирование, Functional Тестирование, Selenium Мониторинг: Datadog Frontend: VueX, SSR (Nuxt.js), Pre-rendering, Bootstrap 5 БД: MongoDB CI/CD: Circle CI, Travis CI, Jenkins Другое: Elasticsearch, Kubernetes, Ansible, Agile Development \u0026 Scrum С чем работал раньше Языки: PHP, Java, C++, Perl Frontend: jQuery, LESS, SSG (Jekyll) Design: Axure, Photoshop БД: MySQL CMS: 1C-Bitrix, Wordpress, OpenCart, Joomla, InstantCMS Tools: MS Visual Studio, SublimeText, Atom, bash OS: Linux (Mint, Ubuntu), Windows (98, 2000, XP, 7, 8, 10) Hosting and cloud platforms: Heroku, DigitalOcean, HostSailor, nic.ru Web servers: Apache ","date":"08.12.2021","objectID":"/skills/:0:0","series":null,"tags":null,"title":"Навыки","uri":"/skills/#"},{"categories":null,"content":"Описание","date":"08.12.2021","objectID":"/about/","series":null,"tags":null,"title":"Обо мне","uri":"/about/"},{"categories":null,"content":" 🖖 Привет! Меня зовут Алексей, мне 35 лет и я Веб-мастер Backend разработчик. -- Мой путь -- Первую HTML страничку я сделал примерно в 2001 году, и это во многом определило мою дальнейшую жизнь. В 2004 поступил в ННГУ Лобачевского на факультет ВМК (прикладная математика и информатика). В 2009 получил диплом специалиста по специальности \"математик, системный программист\". Будучи студентом, а затем стажером - изучал и применял на практике С++ и Java. -- По своей инициативе ковырялся в PHP, Perl и JS. Наверное, с тех пор я и отдал предпочтение интерпретируемым языкам. -- Более 10 лет я занимался разработкой и продвижением сайтов. За это время успел поработать с CMS Joomla, InstantCMS, Opencart, Wordpress, 1C-Bitrix. Разрабатывал с нуля сайты-визитки, одностраничники, интернет-магазины, корпоративные сайты, статейники и агрегаторы. Работая как частный специалист проходил все этапы разработки: Как менеджер проекта: выявление потребностей клиента, разработка и согласование ТЗ, анализ ниши, согласование этапов разработки; Как frontend-разработчик: прототипирование, верстка, интеграция; Как backend-разработчик: развертывание сайта на хостинге, установка и настройка CMS, доработка функционала; Как SEO-специалист: анализ конкурентов, сбор и кластеризация семантического ядра, рекомендации по созданию структуры и подготовке контента, оптимизация сайта, технический аудит, настройка аналитики; Как контент-менеджер: создание структуры сайта, наполнение сайта; Ценность полученного мной опыта в том, что я могу глубже погружаться в поставленную задачу на основе существующих знаний. Считаю, что разработчик, понимающий весь стек технологий, способен: писать более качественные приложения; более эффективно взаимодействовать с коллегами; обладая обширным арсеналом идей и концепций, лучше справляться со своими основными задачами; лучше понимать, что происходит при использовании клиентом программного обеспечения; лучше понимать бизнес клиента. Навыки Python Django DRF JSON APIs PostgreSQL Celery Flower Nginx Traefik Redis Prometheus Grafana Docker Docker Compose Git GitHub GitHub Actions Unit testing HTML CSS Таймлайн февраль 2021 — по настоящее время Погружаюсь в бэкенд (Python, Django) октябрь 2015 — февраль 2022 Web-разработчик, SEO-специалист в ПКФ Луидор, Нижний Новгород (автомобильный завод, спецавтомобили) апрель 2012 — октябрь 2015 Full-stack разработчик, SEO специалист на фрилансе сентябрь 2011 — апрель 2012 Заместитель руководителя филиала в Редокс, Москва (оптовая торговля, товары для здоровья) сентябрь 2008 — апрель 2011 Менеджер по продажам в Редокс, Нижний Новгород (розничная торговля, товары для здоровья) ноябрь 2006 — май 2008 Инженер-стажер в Тэлма Софт, Нижний Новгород (разработка ПО) сентябрь 2004 — май 2009 ННГУ им. Лобачевского, ВМК Нижний Новгород сентябрь 1994 — май 2004 Средняя школа №4, Городец -- -- ","date":"08.12.2021","objectID":"/about/:0:0","series":null,"tags":null,"title":"Обо мне","uri":"/about/#"}]